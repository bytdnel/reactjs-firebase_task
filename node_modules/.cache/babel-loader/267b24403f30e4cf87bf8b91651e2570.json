{"ast":null,"code":"import app from 'firebase/app';\nimport firebase from 'firebase';\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\nconsole.log(config);\nlet UserUid = null;\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.doCreateNewInstanceBasedOnAuthUid = async uid => {\n      try {\n        const doc = this.db.collection('users').doc(uid);\n        await doc.set({\n          todos: []\n        });\n        console.log({\n          message: 'Created a node between authUser and Clowd Firestore'\n        });\n      } catch (e) {\n        console.log({\n          message: 'Error creating node between authUser and Clowd Firestore',\n          e\n        }); // нужно удалить аккаунт и заставить пользователья регистрироваться снова\n      }\n    };\n\n    this.doRecognizeUserUid = uid => {\n      console.log('я узнал юзерайди', uid);\n      UserUid = uid;\n    };\n\n    this.doAddTodo = (todo, uid) => {\n      return new Promise((resolve, reject) => {\n        this.db.collection('users').doc(uid).update({\n          todos: this.db.todos.arrayUnion(todo)\n        }).then(() => resolve()).catch(e => reject(e));\n      });\n    };\n\n    app.initializeApp(config);\n    this.auth = app.auth();\n    this.db = firebase.firestore();\n  }\n\n}\n\nexport default Firebase;\nexport { UserUid };","map":{"version":3,"sources":["/Users/danielbyta/Documents/work/sezam-auth/src/components/Firebase/firebase.js"],"names":["app","firebase","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","console","log","UserUid","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","doCreateNewInstanceBasedOnAuthUid","uid","doc","db","collection","set","todos","message","e","doRecognizeUserUid","doAddTodo","todo","Promise","resolve","reject","update","arrayUnion","then","catch","initializeApp","firestore"],"mappings":"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","sourcesContent":["import app from 'firebase/app'\nimport firebase from 'firebase'\n\n\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  }\n\nconsole.log(config)\n\nlet UserUid = null\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(config)\n        this.auth = app.auth()\n        this.db = firebase.firestore()\n    }\n\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password)\n\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password)\n\n    doSignOut = () => this.auth.signOut()\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email)\n \n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password)\n\n    doCreateNewInstanceBasedOnAuthUid = async uid => {\n        try {\n            const doc = this.db.collection('users').doc(uid)\n            await doc.set({\n                todos: []\n            })\n            console.log({message: 'Created a node between authUser and Clowd Firestore'})\n        } catch(e) {\n            console.log({message: 'Error creating node between authUser and Clowd Firestore', e})\n            // нужно удалить аккаунт и заставить пользователья регистрироваться снова\n        }\n    }\n\n    doRecognizeUserUid = uid => {\n        console.log('я узнал юзерайди', uid)\n        UserUid = uid\n    }\n\n    doAddTodo = (todo, uid) => {\n        return new Promise((resolve, reject) => {\n            this.db.collection('users').doc(uid).update({\n                todos: this.db.todos.arrayUnion(todo)\n            })\n            .then(() => resolve())\n            .catch(e => reject(e))\n        })\n    }\n}\n\nexport default Firebase\nexport { UserUid }"]},"metadata":{},"sourceType":"module"}