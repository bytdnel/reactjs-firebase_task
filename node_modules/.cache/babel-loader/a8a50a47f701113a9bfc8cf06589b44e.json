{"ast":null,"code":"import app from 'firebase/app';\nimport firebase from 'firebase';\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\nconsole.log(config);\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    app.initializeApp(config);\n    this.auth = app.auth();\n    this.db = firebase.firestore(); // this.db.collection(\"users\").get().then((querySnapshot) => {\n    //     querySnapshot.forEach((doc) => {\n    //         console.log(`${doc.id} => ${doc.data()}`)\n    //     })\n    // })\n\n    let instance = this.db.collection('users').doc('myownkey');\n    setTimeout(() => {\n      instance.set({\n        name: \"Moscow\",\n        state: \"Russia\",\n        country: \"Earth\"\n      });\n    }, 5000); //console.log(this.db.collection('users'))\n    // .add({\n    //     name: \"Moscow\",\n    //     state: \"Russia\",\n    //     country: \"Earth\"\n    // })\n    // .then(docRef => console.log({message: 'successful inserting in database', id: docRef.id}))\n    // .catch((e) => console.log({message: 'oooups...', e}))\n  }\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/danielbyta/Documents/work/sezam-auth/src/components/Firebase/firebase.js"],"names":["app","firebase","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","console","log","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","initializeApp","db","firestore","instance","collection","doc","setTimeout","set","name","state","country"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAGA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADT;AAEXC,EAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG,qBAFb;AAGXC,EAAAA,WAAW,EAAEL,OAAO,CAACC,GAAR,CAAYK,sBAHd;AAIXC,EAAAA,SAAS,EAAEP,OAAO,CAACC,GAAR,CAAYO,oBAJZ;AAKXC,EAAAA,aAAa,EAAET,OAAO,CAACC,GAAR,CAAYS,wBALhB;AAMXC,EAAAA,iBAAiB,EAAEX,OAAO,CAACC,GAAR,CAAYW;AANpB,CAAf;AASAC,OAAO,CAACC,GAAR,CAAYhB,MAAZ;;AAEA,MAAMiB,QAAN,CAAe;AACXC,EAAAA,WAAW,GAAG;AAAA,SA4BdC,gCA5Bc,GA4BqB,CAACC,KAAD,EAAQC,QAAR,KAC/B,KAAKC,IAAL,CAAUC,8BAAV,CAAyCH,KAAzC,EAAgDC,QAAhD,CA7BU;;AAAA,SA+BdG,4BA/Bc,GA+BiB,CAACJ,KAAD,EAAQC,QAAR,KAC3B,KAAKC,IAAL,CAAUG,0BAAV,CAAqCL,KAArC,EAA4CC,QAA5C,CAhCU;;AAAA,SAkCdK,SAlCc,GAkCF,MAAM,KAAKJ,IAAL,CAAUK,OAAV,EAlCJ;;AAAA,SAoCdC,eApCc,GAoCIR,KAAK,IAAI,KAAKE,IAAL,CAAUO,sBAAV,CAAiCT,KAAjC,CApCb;;AAAA,SAsCdU,gBAtCc,GAsCKT,QAAQ,IACvB,KAAKC,IAAL,CAAUS,WAAV,CAAsBC,cAAtB,CAAqCX,QAArC,CAvCU;;AACVvB,IAAAA,GAAG,CAACmC,aAAJ,CAAkBjC,MAAlB;AACA,SAAKsB,IAAL,GAAYxB,GAAG,CAACwB,IAAJ,EAAZ;AACA,SAAKY,EAAL,GAAUnC,QAAQ,CAACoC,SAAT,EAAV,CAHU,CAIV;AACA;AACA;AACA;AACA;;AAEA,QAAIC,QAAQ,GAAG,KAAKF,EAAL,CAAQG,UAAR,CAAmB,OAAnB,EAA4BC,GAA5B,CAAgC,UAAhC,CAAf;AAEAC,IAAAA,UAAU,CAAC,MAAM;AAACH,MAAAA,QAAQ,CAACI,GAAT,CAAa;AAC3BC,QAAAA,IAAI,EAAE,QADqB;AAE3BC,QAAAA,KAAK,EAAE,QAFoB;AAG3BC,QAAAA,OAAO,EAAE;AAHkB,OAAb;AAIf,KAJO,EAIL,IAJK,CAAV,CAZU,CAkBV;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACP;;AA3BU;;AA2Cf,eAAe1B,QAAf","sourcesContent":["import app from 'firebase/app'\nimport firebase from 'firebase'\n\n\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  }\n\nconsole.log(config)\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(config)\n        this.auth = app.auth()\n        this.db = firebase.firestore()\n        // this.db.collection(\"users\").get().then((querySnapshot) => {\n        //     querySnapshot.forEach((doc) => {\n        //         console.log(`${doc.id} => ${doc.data()}`)\n        //     })\n        // })\n\n        let instance = this.db.collection('users').doc('myownkey')\n\n        setTimeout(() => {instance.set({\n            name: \"Moscow\",\n            state: \"Russia\",\n            country: \"Earth\"\n        })}, 5000)\n        \n        //console.log(this.db.collection('users'))\n            // .add({\n            //     name: \"Moscow\",\n            //     state: \"Russia\",\n            //     country: \"Earth\"\n            // })\n            // .then(docRef => console.log({message: 'successful inserting in database', id: docRef.id}))\n            // .catch((e) => console.log({message: 'oooups...', e}))\n    }\n\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password)\n\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password)\n\n    doSignOut = () => this.auth.signOut()\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email)\n \n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password)\n}\n\nexport default Firebase;"]},"metadata":{},"sourceType":"module"}